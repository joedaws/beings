#+TITLE: Stream Goals

* Tasks
** TODO Add functionality to run a simulation

** TODO Ask people for their weird eldrich beings names.
These are stored in the [[file:data/being_name_registry.yaml][name registry]] yaml.

** TODO implement beings function that collects resources
Probably means that we need a function to look at all beings at a certain node
and decides who gets what. Does it make sense for a being registry to take care of this?

** DONE Implement the command parser following [[https://elixir-lang.org/getting-started/mix-otp/docs-tests-and-with.html][this page]].

** DONE Build the server following this [[https://elixir-lang.org/getting-started/mix-otp/dependencies-and-umbrella-projects.html][page]].

** DONE Work on [[https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html#our-first-supervisor][adding application start up customization]]
** DONE add supervision to the genserver and it's child processes.
Working on this starting 5/4

** DONE GenServer to hold nodes and beings
The idea is to use a genserver which holds a node struct
and handles calls to udpate that node.
Work in progress
see [[file:lib/exp/server_node.ex][server_node.ex]]

follow the path laid out in the [[https://elixir-lang.org/getting-started/mix-otp/genserver.html][tutorial]]

** DONE simple script to run
** DONE implement ichor generation from node
*** DONE nodes have ichor_supply
*** DONE beings have location
*** DONE change node occupancy when visited by a being
** DONE implement ranks

* Learnings
** How to use genserver
Originally, I had planned to use the genserver to hold the data for beings.
However following the [[https://elixir-lang.org/getting-started/mix-otp/genserver.html][tutorial]] The genserver holds the buckets which will
store the data. When updating the buckets using the Buckets implemented API,
since we are using the Agent behaviour, the bucket retrived from the GenServer API
lookup will also be updated.

_tl;dr_
Still use genserver but now we will deal with the buckets once they are created.

** What does =iex -S mix= do?
Mix projects have a =mix.exs= file which is an elixir script with details of how to start
an application. The iex command has an -S flag to run a script. So =iex -S mix= runs
the script that starts the application before returning control to user in the REPL.

** Runtime config vs. compile-time config
Use the runtime config as frequently as possible to make the
overall project more flexible.

** Use ets to store some static data
After the app starts consider loading the =data= in =yamls= into
the ets table.

* Tech Debt
** Fix issue with relative path to yaml files required by cosmos.beings and cosmos.nodes

* Emacs oddities
** What to do when emacs hangs [[https://www.reddit.com/r/emacs/comments/k7cku8/when_emacs_hangs_what_do_you_do/][here]]
** Learn to use the eshell better

* Resources
** Viz libraries
*** [[https://github.com/mindok/contex][contex]] library in elixir for making SVG
*** [[https://d3js.org/][d3]] js library for awesome visualizations
