#+TITLE: Stream Goals

* Tasks
** Once Per Stream
be sure to reset these each stream.
*** TODO update weird eldrich beings names and location names.
These are stored in the [[file:apps/cosmos/data/node_name_registry.yaml][being names]] yaml.
Also update the node places [[file:apps/cosmos/data/node_name_registry.yaml][node names]] yaml.

** Lore
*** Taxonomy of beings
There are three classes of Eldrich beings in the simulation
- ichor machines (weird science)

  After a group of international researchers discovered
  the existence of ichor in the universe, they used its power
  to bring into being autonomous machines.
  These machines quickly learned to escape the laboratories of their
  creators. Now they scour the world for resources to perform rituals
  to build more of the ichor that powers them.

- dream realm

  An emergent property of a universe with sentient beings is a
  realm of mirrored consciousness and echos of sentient thought.
  Humans interact with this realm during their sleep and some call
  it the dream realm. The beings of this realm phase into and out of
  the physical world with differening appearence and collect resources.
  Their realm is tightly tied to our own and there continued existence
  depends on obtaining more ichor.

- deep denizen

  Those that dwell in the vast voids between the starts.

*** Property Ownership
Beings can own nodes and prevent other beings from fully utilizing the
resources there.


*** Cooperation
Beings can choose to cooperate with one another and not enforce any claimed or
asserted property ownership.


** Cosmos Application
*** TODO create being worker cache
This cache will return the pid of a being worker given the being_id

Follow the example in Sasa Juric book.

*** TODO create node worker cache
This cache will return the pid of a node worker given the node_id

*** TODO update nodes and beings to store ids instead of process ids
process ids may change over time, they should store ids of nodes
and beings instead in their neighbor properties since these are
not expected to change over time.

*** TODO create name generator that won't repeat names and is quick

*** TODO add database to the backend
- [ ] beings
- [ ] nodes
- [ ] events

*** TODO add additional commands to configure newly created beings and nodes
Update CosmosServer application

*** TODO launch basic simulation.

*** TODO add knowledge to beings
Beings store the spells/recipies they know in
their knowledge map

*** TODO add memories to beings

*** TODO implement ranks

*** DONE name generate for millions of node locations
Need to create generate function instances for the rest of the node template types

Need to create name generator tests

*** DONE name generation for millions of beings.
How can we generate unique or nearly unique names
for millions or billions of being?

Still need to write tests

*** DONE add graph generator function which spawns and connects nodes.
Will create a Cosmos.Create context to put some useful functions
for creating a registry with the appropriate pieces for testing
and for trying out different configurations.

Need to figure out where to put this function of functions,
consider the advice [[https://stackoverflow.com/questions/34623694/run-code-on-application-startup-phoenix-framework-elixir][here]] using something like the function
found in [[file:apps/cosmos/create/simple.exs][the create simple module]].

*** DONE add graph setup to application start

*** DONE add ability to perform rituals to BeingWorker
Add a new function to [[file:apps/cosmos/lib/cosmos/beings/being_worker.ex][being worker]]

*** DONE clean up the decision tree code
      This means using correct names and updating
      so that beings use their rituals list
      and with correct observations members.

*** DONE add observations to beings
Add observe method to the being worker API

Build a observations struct

*** DONE consider creating a decision maker process
-- don't build this
this would replace part of the being worker functionality

instead a decision maker process puts actions in a queue which
it sends to the beingworker to execute.

This would allow external storage of how to make a decision.

Should also consider using a decision tree to make decisions,
with specific cut off values being unique to beings.

*** DONE create decision tree
should the decision tree spawn task processes what send commands to
the original worker process?

I think yes

Or should the worker process receive the returned value and then generate
a task which allows itself to use the client api?


*** DONE add grimiore rituals/recipies

*** DONE add move to BeingWorker

*** DONE add neighbors to Node

*** DONE remove call to other worker being in give resources

*** DONE implement beings function that collects resources
Probably means that we need a function to look at all beings at a certain node
and decides who gets what. Does it make sense for a being registry to take care of this?


*** DONE add resource to Cosmos.Locations.Node

*** DONE add resources to Cosmos.Beings.Being

*** DONE add attach to node for Being worker

*** DONE create node worker similar to being worker.

*** DONE resolve deadlock of processes in exp
I won't solve this because I want to take a completly different approach
to modifying existing beings. The exp approach will always have the
chance that two beingserver processes will call each other and dead lock.


** Cosmos Server Application
*** DONE Implement the command parser following [[https://elixir-lang.org/getting-started/mix-otp/docs-tests-and-with.html][this page]].

*** DONE Build the server following this [[https://elixir-lang.org/getting-started/mix-otp/dependencies-and-umbrella-projects.html][page]].

*** DONE Work on [[https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html#our-first-supervisor][adding application start up customization]]

*** DONE add supervision to the genserver and it's child processes.
Working on this starting 5/4


** Cosmos Web Application
*** TODO go througgh a Phoenix tutorial

*** TODO find out what liveview is about


** Cosmos art
This section is for todos related to getting visuals related to
the beings.

Right now I want to explore using 1-bit character forms

*** TODO create tempalte for being avatars

*** TODO create 4 frame animations for each part of tempalte

*** TODO create evolution of beings upon rank up

** Cosmos Music

*** TODO make a sound for each being

*** TODO make ambient music to play at each location

* Learnings
** Build a system first, then figure out more complicated behavior later.
In the first pass, I'll just build beings that make observaitons
of their environment and don't store a history of interactions other
than possibly their friends. Based on this observation they will make
decisions. Later iterations can include more complex traditional AI
systems. And much later reinforcement learning can be used.

** Focus on single being behavior first
Before working on the multi-being behavior too much I think
I will focus more on single being behavior and flush-out
how it will make decisions based on its observations.

** About concurrent being workers
Many of the BeingWorker functions need to pull a being state,
do a computation and return a new updated being state to the
bucekt. I think the restriction that there is a one to one
relationship between being states and being workers means
that I don't need to use a Mutex when updating the being state.

I need to think of a test to make sure this assumption is safe.

** How to use genserver
Originally, I had planned to use the genserver to hold the data for beings.
However following the [[https://elixir-lang.org/getting-started/mix-otp/genserver.html][tutorial]] The genserver holds the buckets which will
store the data. When updating the buckets using the Buckets implemented API,
Since we are using the Agent behaviour, the bucket retrived from the GenServer API
lookup will also be updated.

_tl;dr_
Still use genserver but now we will deal with the buckets once they are created.

** What does =iex -S mix= do?
Mix projects have a =mix.exs= file which is an elixir script with details of how to start
an application. The iex command has an -S flag to run a script. So =iex -S mix= runs
the script that starts the application before returning control to user in the REPL.

** Runtime config vs. compile-time config
Use the runtime config as frequently as possible to make the
overall project more flexible.

** Use ets to store some static data
After the app starts consider loading the =data= in =yamls= into
the ets table.

* Tech Debt
** Fix issue with relative path to yaml files required by cosmos.beings and cosmos.nodes

* Emacs oddities
** What to do when emacs hangs [[https://www.reddit.com/r/emacs/comments/k7cku8/when_emacs_hangs_what_do_you_do/][here]]
** Learn to use the eshell better

* Resources
** Viz libraries
*** [[https://github.com/mindok/contex][contex]] library in elixir for making SVG
*** [[https://d3js.org/][d3]] js library for awesome visualizations

** decision trees
*** Survival Tree
#+begin_src mermaid
graph TD
    A[SurvivalTree] --> B(low_on_ichor?)
    B -->|ichor >= ichor_thresh| C(collect_ritual_resources)
    B -->|ichor < ichor_thresh| D(can_perform_ritual?)
    D -->|Yes| E[action: perform_ritual]
    D -->|No| F(find_necessary_resources)
    F -->|current node has needed resource| G[action: harvest]
    F -->|current node does not have needed resources| H[action: move]
    C -->|current node does not have needed resources| H
    C -->|current node has needed resource| I[have sufficient amount of resource at node]
    I -->|Yes| H
    I -->|No| G
#+end_src
