defmodule Cosmos.Beings.Brains.DecisionTreeNode do
  @moduledoc """
  This module defines the DecisionTreeNode struct
  which can be used to build up a decision tree.

  Given a list of unique thresholds (which can be a single value),
  a patition of length(thresholds) + 1 bins can be generated
  for the real line. The child of the node whose index in the
  children list is the same as the index (as ordered from left to right)
  of the partition of the real line generated by the thresholds is
  the next node until we reach a leaf node wich contains an action.
  """

  alias Cosmos.Beings.Actions
  alias Cosmos.Magic.Ritual

  defstruct next: nil,
            children: [],
            # a leaf node is any node that has a !nil action
            action: nil,
            description: "none"

  @doc """
  Given a list of thresholds and a value,
  return the index of the partition to which the value belongs.

  The first argument is the list of thresholds which is assumed
  to be in order from least to greatest. This function will
  not work as desired for an unordered list.
  """
  def get_partition_index([head | tail], value, idx \\ 0) do
    index =
      if value < head do
        idx
      else
        get_partition_index(tail, value, idx + 1)
      end

    index
  end

  def get_partition_index([], value, idx) do
    idx
  end

  @doc """
  returns 0 if no ritual can be performed and 1 otherwise.
  """
  def get_can_perform_any_ritual_index(being) do
    valid_rituals =
      for ritual <- being.rituals,
          do: Ritual.sufficient_resources?(being.resources, ritual)

    # can use this index later
    idx = Enum.find_index(valid_rituals, true)

    check =
      if idx == nil do
        0
      else
        1
      end
  end
end
